/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SplitFactory } from "../SplitFactory";

export class SplitFactory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    splitter_: string,
    wethAddress_: string,
    membershipContract_: string,
    overrides?: Overrides
  ): Promise<SplitFactory> {
    return super.deploy(
      splitter_,
      wethAddress_,
      membershipContract_,
      overrides || {}
    ) as Promise<SplitFactory>;
  }
  getDeployTransaction(
    splitter_: string,
    wethAddress_: string,
    membershipContract_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      splitter_,
      wethAddress_,
      membershipContract_,
      overrides || {}
    );
  }
  attach(address: string): SplitFactory {
    return super.attach(address) as SplitFactory;
  }
  connect(signer: Signer): SplitFactory__factory {
    return super.connect(signer) as SplitFactory__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitFactory {
    return new Contract(address, _abi, signerOrProvider) as SplitFactory;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "splitter_",
        type: "address",
      },
      {
        internalType: "address",
        name: "wethAddress_",
        type: "address",
      },
      {
        internalType: "address",
        name: "membershipContract_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
    ],
    name: "createSplit",
    outputs: [
      {
        internalType: "address",
        name: "splitProxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "membershipContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516107a93803806107a983398101604081905261002f91610072565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526100b4565b80516001600160a01b038116811461006d57600080fd5b919050565b600080600060608486031215610086578283fd5b61008f84610056565b925061009d60208501610056565b91506100ab60408501610056565b90509250925092565b60805160601c60a05160601c60c05160601c6106bf6100ea60003960006101000152600060d901526000608d01526106bf6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80634f0e0ef3116100505780634f0e0ef3146100d457806351ec8d1e146100fb57806381a77c8c1461012257600080fd5b80632eb4a7ab1461006c5780633cd8045e14610088575b600080fd5b61007560005481565b6040519081526020015b60405180910390f35b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161007f565b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b6100af61013036600461019b565b6000818155604080516020810184905201604051602081830303815290604052805190602001206040516101639061018e565b8190604051809103906000f5905080158015610183573d6000803e3d6000fd5b506000805592915050565b6104d6806101b483390190565b6000602082840312156101ac578081fd5b503591905056fe608060405234801561001057600080fd5b50336001600160a01b0316633cd8045e6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561004c57600080fd5b505af1158015610060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100849190610257565b600360006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b03166351ec8d1e6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156100e557600080fd5b505af11580156100f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011d9190610257565b600760006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b0316634f0e0ef36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561017e57600080fd5b505af1158015610192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b69190610257565b600260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b0316632eb4a7ab6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561021757600080fd5b505af115801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610285565b60005561029d565b600060208284031215610268578081fd5b81516001600160a01b038116811461027e578182fd5b9392505050565b600060208284031215610296578081fd5b5051919050565b61022a806102ac6000396000f3fe6080604052600436106100695760003560e01c806351ec8d1e1161004357806351ec8d1e1461015857806381e580d314610185578063ba0bafb4146101a557610070565b80632eb4a7ab146100b85780633cd8045e146100e15780633f6dd2391461012d57610070565b3661007057005b600061009160035473ffffffffffffffffffffffffffffffffffffffff1690565b905060405136600082376000803683855af43d806000843e8180156100b4578184f35b8184fd5b3480156100c457600080fd5b506100ce60005481565b6040519081526020015b60405180910390f35b3480156100ed57600080fd5b5060035473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d8565b34801561013957600080fd5b5060075473ffffffffffffffffffffffffffffffffffffffff16610108565b34801561016457600080fd5b506007546101089073ffffffffffffffffffffffffffffffffffffffff1681565b34801561019157600080fd5b506100ce6101a03660046101dc565b6101bb565b3480156101b157600080fd5b506100ce60015481565b600481815481106101cb57600080fd5b600091825260209091200154905081565b6000602082840312156101ed578081fd5b503591905056fea2646970667358221220f102291697040ba107971315e9b0e88c7321aca3c3d756bc790b28b1a6e0656d64736f6c63430008040033a2646970667358221220b2ce8b28cf23fe86845dd216aa5f17a1730d809665912585d0604624ffc9941164736f6c63430008040033";

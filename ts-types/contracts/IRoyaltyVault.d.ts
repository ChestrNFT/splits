/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRoyaltyVaultInterface extends ethers.utils.Interface {
  functions: {
    "getCollectionContract()": FunctionFragment;
    "getWethBalance()": FunctionFragment;
    "sendToSplit()": FunctionFragment;
    "setWethAddress(address)": FunctionFragment;
    "splitter()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCollectionContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWethBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendToSplit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWethAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "splitter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCollectionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWethBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRoyaltyVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRoyaltyVaultInterface;

  functions: {
    getCollectionContract(overrides?: CallOverrides): Promise<[string]>;

    "getCollectionContract()"(overrides?: CallOverrides): Promise<[string]>;

    getWethBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getWethBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendToSplit(overrides?: Overrides): Promise<ContractTransaction>;

    "sendToSplit()"(overrides?: Overrides): Promise<ContractTransaction>;

    setWethAddress(
      wethAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWethAddress(address)"(
      wethAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    splitter(overrides?: CallOverrides): Promise<[string]>;

    "splitter()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getCollectionContract(overrides?: CallOverrides): Promise<string>;

  "getCollectionContract()"(overrides?: CallOverrides): Promise<string>;

  getWethBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getWethBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  sendToSplit(overrides?: Overrides): Promise<ContractTransaction>;

  "sendToSplit()"(overrides?: Overrides): Promise<ContractTransaction>;

  setWethAddress(
    wethAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWethAddress(address)"(
    wethAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  splitter(overrides?: CallOverrides): Promise<string>;

  "splitter()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getCollectionContract(overrides?: CallOverrides): Promise<string>;

    "getCollectionContract()"(overrides?: CallOverrides): Promise<string>;

    getWethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getWethBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendToSplit(overrides?: CallOverrides): Promise<boolean>;

    "sendToSplit()"(overrides?: CallOverrides): Promise<boolean>;

    setWethAddress(
      wethAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWethAddress(address)"(
      wethAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    splitter(overrides?: CallOverrides): Promise<string>;

    "splitter()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getCollectionContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollectionContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getWethBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendToSplit(overrides?: Overrides): Promise<BigNumber>;

    "sendToSplit()"(overrides?: Overrides): Promise<BigNumber>;

    setWethAddress(
      wethAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWethAddress(address)"(
      wethAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    splitter(overrides?: CallOverrides): Promise<BigNumber>;

    "splitter()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCollectionContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollectionContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWethBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWethBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendToSplit(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sendToSplit()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setWethAddress(
      wethAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWethAddress(address)"(
      wethAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    splitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "splitter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
